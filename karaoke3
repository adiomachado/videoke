import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
from tkinter import *

from moviepy.editor import VideoFileClip
import threading
import configparser

CAMINHO_BASE = ".//videoke/musicas/"
primeira_musica = True

def play_video(file_name):
    file_path = CAMINHO_BASE + file_name + ".mp4"
    try:
        video = VideoFileClip(file_path)
        video.preview()

    except Exception as e:
        messagebox.showerror("Erro", f"A Música {file_name} não foi encontrada no Banco de Dados!")
        # messagebox.showerror("Erro", str(e))
        
def start_video():
    secao_desejada = entry.get()
    if len(secao_desejada) <= 4 : 
        file_name = "0" + secao_desejada
    else:
        file_name = secao_desejada   

    if file_name:
        # Definir a seção que você quer buscar
        
        thread = threading.Thread(target=play_video, args=(file_name,))
        thread.start()
    else:
        messagebox.showerror("Erro", f"A Música {file_name} não foi encontrada na Biblioteca")

def stop_video(event):
    # Simula o fechamento do vídeo ao pressionar a tecla 'Esc'
    messagebox.showinfo("Parar", "Reprodução interrompida!")
    window.quit()

def on_entry_change(event):
    # recupera o numero digitado 
    file_name = entry.get()

     # variavel para mostrar o resultado
    result_text = tk.StringVar()
    #valor_label = result_label.config['text']

    if len(file_name) <= 4 : 
        secao_desejada = "0" + file_name
    else:
        secao_desejada = file_name  
     

    if file_name != "":
        if secao_desejada in config:
            arquivo = config[secao_desejada].get('Arquivo')
            artista = config[secao_desejada].get('Artista')
            musica = config[secao_desejada].get('Musica')
            inicio = config[secao_desejada].get('inicio')
            
            result_text.set(f"Código : {secao_desejada}\n"
                            #f"Arquivo: {arquivo}\n"
                            f"Artista: {artista}\n"
                            f"Música : {musica}\n"
                            f"Início : {inicio}                                        "
                            f" ")
            
            # mostra os campos na tela
            
            result_label = tk.Label(window, textvariable=result_text, font="Arial 20",justify=LEFT, bg="#00513f", activeforeground="",
                                     ).place(x=300,y=500)
            
            
        #else:
        #    messagebox.showerror("Erro", f"A Música {secao_desejada} não foi encontrada no arquivo .ini")

# processo para calcular ou nao a nota do cantor
def processa_nota():
    com_nota = check_nota.get()
    if com_nota: # se esta marcado para calcular nota
        label_nota = tk.label(window, text="Calcular Nota no Final",
                              font="Arial 20",justify=LEFT, bg="yellow", activeforeground="")
# Carregar o arquivo .ini
config = configparser.ConfigParser()
config.read('Bd.ini')

# Configuração da janela principal
window = tk.Tk()
window.title("KARAOKÊ CWB ALL")
window.geometry("1024x768")

# tkinter variable
string_var = tk.StringVar()

# deixar a imagem de fundo
img = tk.PhotoImage(file=".//videoke/fundos/fundo2.png")
img = img.subsample(1,1)
label_imagem = tk.Label(image=img)
label_imagem.place(x=0, y=0, relwidth=1.0, relheight=1.0)

#checkbox se vai dar Nota
#check_nota = IntVar()
check_nota = tk.IntVar(value=1)  
check = Checkbutton(
    window,
    text="Com Nota",
    font="Arial 20",
    fg="blue",
    bd=0,
    bg="yellow",
    variable=check_nota,
    command=processa_nota
).pack()

# Adicionando o campo de entrada

label_musica = tk.Label(window, text="Número da Música:", 
    font=("Arial Bold", 40), fg="blue",
    bd=0,
    bg="yellow",) #.place(x=300,y=190)
label_musica.pack(padx=30, pady=30)

entry = tk.Entry(master = window , textvariable = string_var, font=("Arial Bold", 70),width=6) 
#entry.bind('<Key>', on_entry_change)
entry.bind('<Return>', on_entry_change)
entry.pack(padx=30, pady=20)

# widgets 
# Adicionando o botão
style = ttk.Style()
style.configure('S.TButton', font=("Arial Bold", 20),
                background='yellow', foreground='blue')

btn = ttk.Button(window, text="Reproduzir", style='S.TButton', command=start_video)
btn.pack(padx=30, pady=20)

# Bind da tecla 'Esc' para interromper a execução
window.bind('<Escape>', stop_video)

# Iniciando o loop da aplicação
window.mainloop()

# para tornar o arquivo python executável
#   onefile=td num arquivo -w=se tem janelas 
# pyinstaller --onefile -w nomearquivo.py
